Option Compare Database

' =============================================================================
' MACRO PRINCIPAL SIMPLIFICADA - EJECUTAR SOLO ESTA
' =============================================================================
Sub ImportarExcelSimple()
    ' Versión simplificada que evita problemas de SQL
    
    On Error GoTo ErrorGeneral
    
    MsgBox "IMPORTANTE:" & vbCrLf & vbCrLf & _
           "1. Asegúrese de que cambió la ruta en el código" & vbCrLf & _
           "2. Esta macro creará las tablas necesarias" & vbCrLf & _
           "3. Revise la ventana 'Inmediato' para ver el progreso" & vbCrLf & vbCrLf & _
           "¿Continuar?", vbInformation
    
    Debug.Print "=== INICIANDO IMPORTACIÓN SIMPLIFICADA ==="
    Debug.Print "Hora: " & Now()
    
    ' PASO 1: Crear tabla manualmente (método más seguro)
    Call CrearTablaManual
    
    ' PASO 2: Importar archivos
    Dim rutaCarpeta As String
    Dim contadorArchivos As Integer
    
    ' *** CAMBIAR ESTA RUTA POR LA SUYA ***
    rutaCarpeta = "C:\Users\s493\OneDrive\The Bank of Nova Scotia\Valverde Pacheco, Wilmer Alberto - Sac\"
    
    Debug.Print "Buscando archivos en: " & rutaCarpeta
    
    ' Verificar que la carpeta existe
    If Dir(rutaCarpeta, vbDirectory) = "" Then
        MsgBox "ERROR: La carpeta no existe:" & vbCrLf & rutaCarpeta & vbCrLf & vbCrLf & _
               "Cambie la ruta en el código VBA", vbCritical
        Exit Sub
    End If
    
    contadorArchivos = ProcesarTodosLosArchivos(rutaCarpeta)
    
    ' PASO 3: Mostrar resultados
    If contadorArchivos > 0 Then
        MsgBox "✅ PROCESO COMPLETADO" & vbCrLf & vbCrLf & _
               "Archivos procesados: " & contadorArchivos & vbCrLf & _
               "Se abrirá la tabla con los datos", vbInformation
        
        DoCmd.OpenTable "Vista_Reclamos_Consolidada"
    Else
        MsgBox "❌ No se procesaron archivos" & vbCrLf & _
               "Verifique la ruta y que existan archivos 'Vista_Reclamos_*.xlsx'", vbExclamation
    End If
    
    Debug.Print "=== PROCESO TERMINADO ==="
    Exit Sub
    
ErrorGeneral:
    MsgBox "Error inesperado: " & Err.Description, vbCritical
    Debug.Print "ERROR: " & Err.Description
End Sub

' =============================================================================
' CREAR TABLA MANUALMENTE (Método más compatible)
' =============================================================================
Private Sub CrearTablaManual()
    On Error GoTo ErrorCrearTabla
    
    Debug.Print "Verificando/creando tabla..."
    
    ' Verificar si la tabla ya existe
    Dim existe As Boolean
    existe = False
    
    Dim tdf As DAO.TableDef
    For Each tdf In CurrentDb.TableDefs
        If tdf.Name = "Vista_Reclamos_Consolidada" Then
            existe = True
            Exit For
        End If
    Next tdf
    
    If existe Then
        Debug.Print "✓ La tabla ya existe"
        Exit Sub
    End If
    
    ' Crear tabla usando DAO (más compatible)
    Dim db As DAO.Database
    Dim nuevaTabla As DAO.TableDef
    Dim campo As DAO.Field
    
    Set db = CurrentDb()
    Set nuevaTabla = db.CreateTableDef("Vista_Reclamos_Consolidada")
    
    ' Crear campos uno por uno
    Set campo = nuevaTabla.CreateField("ID", dbLong)
    campo.Attributes = campo.Attributes + dbAutoIncrField
    nuevaTabla.Fields.Append campo
    
    nuevaTabla.Fields.Append nuevaTabla.CreateField("NUMERO_RECLAMO", dbText, 50)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("FECHA_REGISTRO", dbDate)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("CLIENTE", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("ESTADOWORKFLOW", dbText, 100)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("RESULTADO", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("FECHACIERRE", dbDate)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("DESCRIPCION", dbMemo)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("INFORMACION_RESULTADO", dbMemo)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("SUPERVISORSOLUCIONADOR", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("NOMBRESOLUCIONADOR", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("FAMILIA", dbText, 100)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("NUMERODOCUMENTO", dbText, 50)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("PRODUCTO", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("TIPOLOGIA", dbText, 255)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("ARCHIVO_ORIGEN", dbText, 100)
    nuevaTabla.Fields.Append nuevaTabla.CreateField("FECHA_IMPORTACION", dbDate)
    
    ' Agregar tabla a la base de datos
    db.TableDefs.Append nuevaTabla
    
    Debug.Print "✓ Tabla creada exitosamente con " & nuevaTabla.Fields.Count & " campos"
    Exit Sub
    
ErrorCrearTabla:
    Debug.Print "✗ Error creando tabla: " & Err.Description
    MsgBox "No se pudo crear la tabla: " & Err.Description, vbCritical
End Sub

' =============================================================================
' PROCESAR ARCHIVOS EXCEL
' =============================================================================
Private Function ProcesarTodosLosArchivos(rutaCarpeta As String) As Integer
    Dim nombreArchivo As String
    Dim rutaCompleta As String
    Dim contador As Integer
    
    contador = 0
    nombreArchivo = Dir(rutaCarpeta & "Vista_Reclamos_*.xlsx")
    
    If nombreArchivo = "" Then
        Debug.Print "✗ No se encontraron archivos con patrón 'Vista_Reclamos_*.xlsx'"
        ProcesarTodosLosArchivos = 0
        Exit Function
    End If
    
    ' Procesar cada archivo
    Do While nombreArchivo <> ""
        rutaCompleta = rutaCarpeta & nombreArchivo
        Debug.Print "Procesando: " & nombreArchivo
        
        If ImportarUnArchivo(rutaCompleta, nombreArchivo) Then
            contador = contador + 1
            Debug.Print "  ✓ Importado: " & nombreArchivo
        Else
            Debug.Print "  ✗ Error en: " & nombreArchivo
        End If
        
        nombreArchivo = Dir() ' Siguiente archivo
        DoEvents ' Permitir que Windows responda
    Loop
    
    ProcesarTodosLosArchivos = contador
End Function

' =============================================================================
' IMPORTAR UN ARCHIVO INDIVIDUAL
' =============================================================================
Private Function ImportarUnArchivo(rutaArchivo As String, nombreArchivo As String) As Boolean
    On Error GoTo ErrorImportar
    
    Dim tablaTemporal As String
    Dim registrosImportados As Long
    
    ' Nombre único para tabla temporal
    tablaTemporal = "Temp_" & Format(Now(), "hhmmss") & "_" & Left(nombreArchivo, 10)
    
    ' PASO 1: Importar Excel a tabla temporal
    DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel12Xml, _
                              tablaTemporal, rutaArchivo, True, "Hoja1!"
    
    ' Verificar que se importó algo
    registrosImportados = DCount("*", tablaTemporal)
    If registrosImportados = 0 Then
        Debug.Print "    ⚠ Archivo vacío: " & nombreArchivo
        GoTo Limpiar
    End If
    
    ' PASO 2: Transferir a tabla principal usando INSERT más simple
    Dim sql As String
    sql = "INSERT INTO Vista_Reclamos_Consolidada " & _
          "SELECT " & _
          "NUMERO_RECLAMO, FECHA_REGISTRO, CLIENTE, ESTADOWORKFLOW, " & _
          "RESULTADO, FECHACIERRE, DESCRIPCION, INFORMACION_RESULTADO, " & _
          "SUPERVISORSOLUCIONADOR, NOMBRESOLUCIONADOR, FAMILIA, " & _
          "NUMERODOCUMENTO, PRODUCTO, TIPOLOGIA, " & _
          "'" & nombreArchivo & "' AS ARCHIVO_ORIGEN, " & _
          "Now() AS FECHA_IMPORTACION " & _
          "FROM [" & tablaTemporal & "]"
    
    DoCmd.SetWarnings False ' Evitar mensajes de confirmación
    DoCmd.RunSQL sql
    DoCmd.SetWarnings True
    
    Debug.Print "    → " & registrosImportados & " registros transferidos"
    
Limpiar:
    ' Eliminar tabla temporal de forma segura
    Call EliminarTablaTemporal(tablaTemporal)
    
    ImportarUnArchivo = True
    Exit Function
    
ErrorImportar:
    Debug.Print "    ✗ Error: " & Err.Description
    
    ' Limpiar tabla temporal en caso de error
    Call EliminarTablaTemporal(tablaTemporal)
    
    ImportarUnArchivo = False
End Function

' =============================================================================
' MACRO OPCIONAL: Limpiar tabla antes de reimportar
' =============================================================================
Sub LimpiarTablaCompleta()
    If MsgBox("¿Está seguro de que quiere BORRAR todos los datos?", vbYesNo + vbCritical, "CONFIRMAR BORRADO") = vbYes Then
        DoCmd.RunSQL "DELETE FROM Vista_Reclamos_Consolidada"
        MsgBox "Tabla limpiada", vbInformation
    End If
End Sub

' =============================================================================
' MACRO OPCIONAL: Ver estadísticas de la tabla
' =============================================================================
Sub VerEstadisticas()
    On Error GoTo NoExiste
    
    Dim total As Long
    Dim porArchivo As String
    
    total = DCount("*", "Vista_Reclamos_Consolidada")
    
    If total = 0 Then
        MsgBox "La tabla está vacía", vbInformation
        Exit Sub
    End If
    
    MsgBox "Estadísticas de la tabla:" & vbCrLf & vbCrLf & _
           "Total de registros: " & total & vbCrLf & _
           "Fecha última importación: " & DMax("FECHA_IMPORTACION", "Vista_Reclamos_Consolidada"), _
           vbInformation
    
    DoCmd.OpenTable "Vista_Reclamos_Consolidada"
    Exit Sub
    
' =============================================================================
' FUNCIÓN AUXILIAR PARA ELIMINAR TABLAS TEMPORALES DE FORMA SEGURA
' =============================================================================
Private Sub EliminarTablaTemporal(nombreTabla As String)
    On Error Resume Next
    
    ' Verificar si la tabla existe antes de intentar eliminarla
    Dim existe As Boolean
    existe = False
    
    Dim tdf As DAO.TableDef
    For Each tdf In CurrentDb.TableDefs
        If tdf.Name = nombreTabla Then
            existe = True
            Exit For
        End If
    Next tdf
    
    If existe Then
        DoCmd.DeleteObject acTable, nombreTabla
        Debug.Print "    → Tabla temporal eliminada: " & nombreTabla
    End If
    
    On Error GoTo 0
End Sub