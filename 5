Sub CargarExcelGrandeAAccess()
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim xlApp As Object
    Dim xlWorkbook As Object
    Dim xlWorksheet As Object
    Dim fd As FileDialog
    Dim strFilePath As String
    Dim strTableName As String
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long, j As Long
    Dim fieldNames As String
    Dim fieldTypes As String
    Dim sqlCreate As String
    Dim sqlInsert As String
    Dim startTime As Double
    Dim batchSize As Long
    Dim currentBatch As Long
    
    ' Configuraciones
    batchSize = 1000 ' Procesar en lotes de 1000 registros
    strTableName = "TablaExcelImportada"
    
    startTime = Timer
    
    ' Mostrar diálogo para seleccionar archivo Excel
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Seleccionar archivo Excel"
        .Filters.Clear
        .Filters.Add "Archivos Excel", "*.xlsx;*.xls;*.xlsm"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            strFilePath = .SelectedItems(1)
        Else
            MsgBox "No se seleccionó ningún archivo.", vbInformation
            Exit Sub
        End If
    End With
    
    On Error GoTo ErrorHandler
    
    ' Mostrar progreso inicial
    DoCmd.Hourglass True
    Debug.Print "Iniciando carga del archivo: " & strFilePath
    Debug.Print "Hora de inicio: " & Now()
    
    ' Abrir conexión a la base de datos actual
    Set db = CurrentDb()
    
    ' Eliminar tabla si existe
    On Error Resume Next
    DoCmd.DeleteObject acTable, strTableName
    On Error GoTo ErrorHandler
    
    ' Crear aplicación Excel
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = False
    xlApp.DisplayAlerts = False
    xlApp.ScreenUpdating = False
    xlApp.Calculation = -4135 ' xlCalculationManual
    
    Debug.Print "Abriendo archivo Excel..."
    
    ' Abrir el archivo Excel
    Set xlWorkbook = xlApp.Workbooks.Open(strFilePath, False, True) ' ReadOnly = True
    Set xlWorksheet = xlWorkbook.Worksheets(1) ' Primera hoja
    
    ' Encontrar la última fila y columna con datos
    lastRow = xlWorksheet.Cells(xlWorksheet.Rows.Count, 1).End(-4162).Row ' xlUp
    lastCol = xlWorksheet.Cells(1, xlWorksheet.Columns.Count).End(-4159).Column ' xlToLeft
    
    Debug.Print "Dimensiones encontradas - Filas: " & lastRow & ", Columnas: " & lastCol
    
    ' Construir nombres de campos y tipos
    fieldNames = ""
    fieldTypes = ""
    
    For j = 1 To lastCol
        Dim fieldName As String
        Dim cellValue As Variant
        
        ' Obtener nombre del campo (primera fila)
        cellValue = xlWorksheet.Cells(1, j).Value
        
        If IsNull(cellValue) Or cellValue = "" Then
            fieldName = "Campo" & j
        Else
            ' Limpiar nombre del campo
            fieldName = Replace(Replace(Replace(CStr(cellValue), " ", "_"), ".", "_"), "-", "_")
            fieldName = Replace(Replace(Replace(fieldName, "(", ""), ")", ""), "/", "_")
            fieldName = Replace(Replace(Replace(fieldName, "+", "_"), "*", "_"), "=", "_")
            ' Asegurar que no comience con número
            If IsNumeric(Left(fieldName, 1)) Then
                fieldName = "F_" & fieldName
            End If
            ' Limitar longitud
            If Len(fieldName) > 64 Then
                fieldName = Left(fieldName, 64)
            End If
        End If
        
        fieldNames = fieldNames & "[" & fieldName & "]"
        fieldTypes = fieldTypes & "[" & fieldName & "] TEXT(255)"
        
        If j < lastCol Then
            fieldNames = fieldNames & ", "
            fieldTypes = fieldTypes & ", "
        End If
    Next j
    
    ' Crear la tabla
    sqlCreate = "CREATE TABLE [" & strTableName & "] (ID AUTOINCREMENT PRIMARY KEY, " & fieldTypes & ")"
    
    Debug.Print "Creando tabla..."
    db.Execute sqlCreate
    
    ' Preparar inserción por lotes
    Debug.Print "Iniciando inserción de datos..."
    
    ' Abrir recordset para inserción
    Set rs = db.OpenRecordset("SELECT * FROM [" & strTableName & "]", dbOpenDynaset)
    
    ' Procesar datos por lotes
    For i = 2 To lastRow Step batchSize
        Dim endRow As Long
        endRow = i + batchSize - 1
        If endRow > lastRow Then endRow = lastRow
        
        Debug.Print "Procesando filas " & i & " a " & endRow & " de " & lastRow
        
        ' Usar transacción para mejorar rendimiento
        db.BeginTrans
        
        Dim rowIndex As Long
        For rowIndex = i To endRow
            rs.AddNew
            
            For j = 1 To lastCol
                Dim value As Variant
                value = xlWorksheet.Cells(rowIndex, j).Value
                
                ' Manejar valores nulos y convertir a texto si es necesario
                If IsNull(value) Or IsEmpty(value) Then
                    rs.Fields(j).Value = Null
                Else
                    ' Convertir a texto y limitar longitud
                    Dim textValue As String
                    textValue = CStr(value)
                    If Len(textValue) > 255 Then
                        textValue = Left(textValue, 255)
                    End If
                    rs.Fields(j).Value = textValue
                End If
            Next j
            
            rs.Update
        Next rowIndex
        
        db.CommitTrans
        
        ' Mostrar progreso
        DoCmd.Echo True, "Procesando... " & Format((endRow / lastRow) * 100, "0.0") & "% completado"
        DoEvents
    Next i
    
    rs.Close
    
    ' Cerrar Excel
    xlWorkbook.Close False
    xlApp.Quit
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
    ' Cerrar base de datos
    db.Close
    Set db = Nothing
    
    DoCmd.Hourglass False
    DoCmd.Echo True, ""
    
    Dim totalTime As Double
    totalTime = Timer - startTime
    
    ' Mostrar resumen
    MsgBox "¡Importación completada exitosamente!" & vbCrLf & _
           "Tabla creada: " & strTableName & vbCrLf & _
           "Registros procesados: " & (lastRow - 1) & vbCrLf & _
           "Columnas: " & lastCol & vbCrLf & _
           "Tiempo total: " & Format(totalTime / 60, "0.0") & " minutos", _
           vbInformation, "Importación Completada"
    
    Debug.Print "Importación completada en " & Format(totalTime, "0.0") & " segundos"
    
    Exit Sub
    
ErrorHandler:
    ' Limpiar objetos en caso de error
    DoCmd.Hourglass False
    DoCmd.Echo True, ""
    
    If Not rs Is Nothing Then rs.Close
    If Not db Is Nothing Then
        db.Rollback
        db.Close
    End If
    
    If Not xlWorkbook Is Nothing Then xlWorkbook.Close False
    If Not xlApp Is Nothing Then xlApp.Quit
    
    Set rs = Nothing
    Set db = Nothing
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
    MsgBox "Error durante la importación: " & Err.Number & " - " & Err.Description, _
           vbCritical, "Error"
    
    Debug.Print "Error: " & Err.Number & " - " & Err.Description
End Sub

' Función auxiliar para optimizar la importación de archivos muy grandes
Sub CargarExcelGrandeMejorado()
    ' Esta versión usa el método TransferSpreadsheet como alternativa más rápida
    ' pero con menos control sobre el proceso
    
    Dim fd As FileDialog
    Dim strFilePath As String
    Dim strTableName As String
    
    strTableName = "TablaExcelImportada_Rapido"
    
    ' Seleccionar archivo
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
        .Title = "Seleccionar archivo Excel (Método Rápido)"
        .Filters.Clear
        .Filters.Add "Archivos Excel", "*.xlsx;*.xls;*.xlsm"
        .AllowMultiSelect = False
        
        If .Show = -1 Then
            strFilePath = .SelectedItems(1)
        Else
            MsgBox "No se seleccionó ningún archivo.", vbInformation
            Exit Sub
        End If
    End With
    
    On Error GoTo ErrorHandler2
    
    ' Eliminar tabla si existe
    On Error Resume Next
    DoCmd.DeleteObject acTable, strTableName
    On Error GoTo ErrorHandler2
    
    DoCmd.Hourglass True
    
    ' Importar usando TransferSpreadsheet (más rápido para archivos grandes)
    DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel12Xml, _
                            strTableName, strFilePath, True
    
    DoCmd.Hourglass False
    
    MsgBox "Importación rápida completada exitosamente!" & vbCrLf & _
           "Tabla creada: " & strTableName, vbInformation
    
    Exit Sub
    
ErrorHandler2:
    DoCmd.Hourglass False
    MsgBox "Error en importación rápida: " & Err.Description, vbCritical
End Sub
