%%%%%%%%%%%%%%%%%%%%%%%%%%%
library(fitdistrplus)

# Tus datos
datos <- c(...)  # Reemplaza con tu variable

# Ajustar diferentes distribuciones
fit_normal <- fitdist(datos, "norm")
fit_lognormal <- fitdist(datos, "lnorm")
fit_exponencial <- fitdist(datos, "exp")
fit_gamma <- fitdist(datos, "gamma")

# Resumen de los ajustes
summary(fit_normal)
summary(fit_lognormal)
summary(fit_exponencial)
summary(fit_gamma)

# Comparaci√≥n visual
par(mfrow = c(2, 2))
plot(fit_normal)
plot(fit_lognormal)
plot(fit_exponencial)
plot(fit_gamma)

# Comparar ajustes con criterios AIC y BIC (menor es mejor)
comparacion <- data.frame(
  Distribucion = c("Normal", "Log-Normal", "Exponencial", "Gamma"),
  AIC = c(fit_normal$aic, fit_lognormal$aic, 
          fit_exponencial$aic, fit_gamma$aic),
  BIC = c(fit_normal$bic, fit_lognormal$bic, 
          fit_exponencial$bic, fit_gamma$bic)
)
print(comparacion)

%%%%%%%%%%%%%%%%%%%%%%%%%%
import win32com.client
import zipfile
import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from pathlib import Path
import time

class ProcesadorReportesFraudeOutlook:
    def __init__(self):
        self.carpeta_historicos = "datos_historicos"
        self.carpeta_diarios = "datos_diarios"
        self.carpeta_temp = "temp"
        self.carpeta_graficas = "graficas_reportes"
        self.archivo_dashboard = "dashboard_fraudes.xlsx"
        
        # Nombre de la carpeta personalizada en Outlook (respeta espacios)
        self.carpeta_outlook_objetivo = "prueba trx" 
        
        # Crear carpetas si no existen
        for carpeta in [self.carpeta_historicos, self.carpeta_diarios, 
                        self.carpeta_temp, self.carpeta_graficas]:
            Path(carpeta).mkdir(exist_ok=True)
        
        # Conectar a Outlook corporativo
        try:
            self.outlook = win32com.client.Dispatch("Outlook.Application")
            self.namespace = self.outlook.GetNamespace("MAPI")
            print("‚úÖ Conectado a Outlook corporativo")
        except Exception as e:
            print(f"‚ùå Error al conectar con Outlook: {e}")
            raise
    
    def obtener_carpeta_personalizada(self):
        """Obtiene la carpeta personalizada desde Outlook"""
        try:
            inbox = self.namespace.GetDefaultFolder(6)  # 6 = Inbox
            carpeta_objetivo = inbox.Folders(self.carpeta_outlook_objetivo)
            print(f"‚úÖ Carpeta '{self.carpeta_outlook_objetivo}' encontrada")
            return carpeta_objetivo
        except Exception as e:
            print(f"‚ùå Error: No se encontr√≥ la carpeta '{self.carpeta_outlook_objetivo}' en Outlook")
            print("üìÅ Carpetas disponibles en Inbox:")
            try:
                inbox = self.namespace.GetDefaultFolder(6)
                for subcarpeta in inbox.Folders:
                    print(f"  - {subcarpeta.Name}")
                print("\nüìÅ Buzones principales:")
                for buzones in self.namespace.Folders:
                    print(f"  - {buzones.Name}")
            except Exception as list_error:
                print(f"Error al listar carpetas: {list_error}")
            raise Exception(f"Carpeta '{self.carpeta_outlook_objetivo}' no encontrada")
    
    def procesar_correo_diario(self):
        """Funci√≥n principal que ejecuta todo el flujo"""
        print(f"üöÄ Iniciando proceso diario - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        datos_dia = self.extraer_excel_de_correo()
        
        if datos_dia is not None:
            print(f"üìä Datos extra√≠dos: {len(datos_dia)} registros")
            self.guardar_excel_diario(datos_dia)
            self.actualizar_dashboard_historico(datos_dia)
            graficas_generadas = self.generar_graficas_diarias(datos_dia)
            self.enviar_reporte_outlook(datos_dia, graficas_generadas)
            self.limpiar_archivos_temporales()
            print("‚úÖ Proceso completado exitosamente")
        else:
            print("‚ö†Ô∏è No se encontraron datos para procesar hoy")
    
    def extraer_excel_de_correo(self):
        """Extrae Excel del ZIP adjunto en correos de hoy desde la carpeta personalizada"""
        try:
            carpeta_objetivo = self.obtener_carpeta_personalizada()
            hoy = datetime.now()
            fecha_filtro = hoy.strftime("%m/%d/%Y")
            print(f"üîç Buscando correos del {fecha_filtro} en la carpeta '{self.carpeta_outlook_objetivo}'...")
            
            filtro = f"[ReceivedTime] >= '{fecha_filtro}' AND [ReceivedTime] < '{(hoy + timedelta(days=1)).strftime('%m/%d/%Y')}'"
            messages = carpeta_objetivo.Items.Restrict(filtro)
            print(f"üìß Encontrados {messages.Count} correos de hoy en '{self.carpeta_outlook_objetivo}'")
            
            for message in reversed(list(messages)): # Procesar el m√°s reciente primero
                if self.es_correo_reporte_fraude(message):
                    print(f"‚úÖ Correo de reporte encontrado: {message.Subject}")
                    for attachment in message.Attachments:
                        if attachment.FileName.lower().endswith('.zip'):
                            print(f"üìÅ Procesando ZIP: {attachment.FileName}")
                            zip_path = os.path.abspath(os.path.join(self.carpeta_temp, attachment.FileName))
                            attachment.SaveAsFile(zip_path)
                            datos = self.extraer_excel_de_zip(zip_path)
                            if datos is not None:
                                print("‚úÖ Excel extra√≠do exitosamente")
                                return datos
            
            print(f"‚ùå No se encontr√≥ correo con ZIP de reportes en la carpeta '{self.carpeta_outlook_objetivo}'")
            return None
        except Exception as e:
            print(f"‚ùå Error al procesar correo: {e}")
            return None
    
    def es_correo_reporte_fraude(self, message):
        """Determina si el correo contiene el reporte diario de fraudes"""
        try:
            remitente = str(message.SenderEmailAddress).lower() if message.SenderEmailAddress else ""
            asunto = str(message.Subject).lower() if message.Subject else ""
            
            criterios_remitente = [ "josemayker75@gmail.com" ]
            criterios_asunto = [ "reporte diario", "fraudes diarios", "prueba trx", "test" ]
            
            remitente_valido = any(criterio in remitente for criterio in criterios_remitente)
            asunto_valido = any(criterio in asunto for criterio in criterios_asunto)
            tiene_adjuntos = message.Attachments.Count > 0
            
            if (remitente_valido or asunto_valido) and tiene_adjuntos:
                print(f"üìã Candidato encontrado - Remitente: {remitente}, Asunto: {asunto}")
                return True
            return False
        except Exception as e:
            print(f"Error al evaluar correo: {e}")
            return False
    
    def extraer_excel_de_zip(self, zip_path):
        """Extrae Excel del archivo ZIP"""
        try:
            if not os.path.exists(zip_path) or os.path.getsize(zip_path) == 0:
                print(f"‚ùå El archivo ZIP no existe o est√° vac√≠o: {zip_path}")
                return None

            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                archivos_excel = [f for f in zip_ref.namelist() if f.lower().endswith(('.xlsx', '.xls'))]
                if not archivos_excel:
                    print("‚ùå No se encontr√≥ archivo Excel en el ZIP")
                    return None
                
                archivo_excel = archivos_excel[0]
                print(f"üìä Procesando Excel: {archivo_excel}")
                
                ruta_excel = os.path.abspath(zip_ref.extract(archivo_excel, self.carpeta_temp))
                datos = pd.read_excel(ruta_excel, engine='openpyxl')
                os.remove(ruta_excel)
                
                print(f"‚úÖ Excel cargado: {len(datos)} filas, {len(datos.columns)} columnas")
                return datos
        except zipfile.BadZipFile:
            print(f"‚ùå El archivo no es un ZIP v√°lido: {zip_path}")
            return None
        except Exception as e:
            print(f"‚ùå Error al extraer ZIP: {e}")
            return None
        finally:
            if os.path.exists(zip_path):
                os.remove(zip_path)

    def guardar_excel_diario(self, datos):
        """Guarda el Excel del d√≠a en la carpeta diarios"""
        fecha_hoy = datetime.now().strftime("%Y%m%d")
        nombre_archivo = f"fraudes_{fecha_hoy}.xlsx"
        ruta_archivo = os.path.join(self.carpeta_diarios, nombre_archivo)
        datos_con_timestamp = datos.copy()
        datos_con_timestamp['fecha_procesamiento'] = datetime.now()
        datos_con_timestamp.to_excel(ruta_archivo, index=False)
        print(f"üíæ Excel diario guardado: {nombre_archivo}")
        return ruta_archivo
    
    def actualizar_dashboard_historico(self, datos_nuevos):
        """Actualiza el Excel dashboard con los datos hist√≥ricos"""
        ruta_dashboard = os.path.join(self.carpeta_historicos, self.archivo_dashboard)
        try:
            if os.path.exists(ruta_dashboard):
                print("üìä Cargando dashboard hist√≥rico...")
                datos_historicos = pd.read_excel(ruta_dashboard)
                datos_combinados = pd.concat([datos_historicos, datos_nuevos], ignore_index=True, sort=False)
            else:
                print("üÜï Creando nuevo dashboard hist√≥rico...")
                datos_combinados = datos_nuevos
            
            datos_combinados.to_excel(ruta_dashboard, index=False)
            print(f"‚úÖ Dashboard actualizado: {len(datos_combinados)} registros totales")
        except Exception as e:
            print(f"‚ùå Error al actualizar dashboard: {e}")
    
    def generar_graficas_diarias(self, datos):
        """Genera gr√°ficas con los datos del d√≠a"""
        graficas_generadas = []
        fecha_hoy = datetime.now().strftime("%Y%m%d")
        try:
            sns.set_style("whitegrid")
            print("üìà Generando gr√°ficas...")
            columnas = datos.columns.tolist()
            
            col_negocio = next((c for c in columnas if any(k in c.lower() for k in ['negocio', 'comercio', 'tienda'])), None)
            col_hora = next((c for c in columnas if any(k in c.lower() for k in ['hora', 'time'])), None)
            col_monto = next((c for c in columnas if any(k in c.lower() for k in ['monto', 'importe', 'valor'])), None)
            col_fecha = next((c for c in columnas if any(k in c.lower() for k in ['fecha', 'date'])), None)

            # --- Gr√°fica 1: Resumen Total ---
            plt.figure(figsize=(10, 6))
            total_fraudes = len(datos)
            plt.bar(['Total de Fraudes Detectados'], [total_fraudes], color='#e74c3c', alpha=0.8)
            plt.title(f'Resumen Monitor SAC - {datetime.now().strftime("%d/%m/%Y")}', fontsize=14, fontweight='bold')
            plt.ylabel('Cantidad de Fraudes')
            plt.text(0, total_fraudes/2, str(total_fraudes), ha='center', va='center', fontsize=16, fontweight='bold', color='white')
            archivo_resumen = os.path.join(self.carpeta_graficas, f"resumen_total_{fecha_hoy}.png")
            plt.tight_layout()
            plt.savefig(archivo_resumen, dpi=300, bbox_inches='tight')
            plt.close()
            graficas_generadas.append(archivo_resumen)
            
            # --- Gr√°fica 2: Top Negocios ---
            if col_negocio:
                plt.figure(figsize=(12, 8))
                fraudes_por_negocio = datos[col_negocio].value_counts().head(10)
                sns.barplot(y=fraudes_por_negocio.index, x=fraudes_por_negocio.values, palette='viridis')
                plt.title(f'Top 10 Negocios con M√°s Fraudes - {datetime.now().strftime("%d/%m/%Y")}', fontsize=14, fontweight='bold')
                plt.xlabel('N√∫mero de Fraudes')
                plt.ylabel('Negocio/Comercio')
                archivo_negocio = os.path.join(self.carpeta_graficas, f"fraudes_negocio_{fecha_hoy}.png")
                plt.tight_layout()
                plt.savefig(archivo_negocio, dpi=300, bbox_inches='tight')
                plt.close()
                graficas_generadas.append(archivo_negocio)

            # --- Gr√°fica 3: Distribuci√≥n Horaria ---
            if col_hora or col_fecha:
                datos_temp = datos.copy()
                if col_hora:
                    datos_temp['hora_num'] = pd.to_datetime(datos_temp[col_hora], errors='coerce').dt.hour
                elif col_fecha:
                    datos_temp['hora_num'] = pd.to_datetime(datos_temp[col_fecha], errors='coerce').dt.hour
                
                datos_temp.dropna(subset=['hora_num'], inplace=True)
                datos_temp['hora_num'] = datos_temp['hora_num'].astype(int)

                if not datos_temp.empty:
                    plt.figure(figsize=(12, 6))
                    fraudes_por_hora = datos_temp['hora_num'].value_counts().sort_index()
                    sns.lineplot(x=fraudes_por_hora.index, y=fraudes_por_hora.values, marker='o', markersize=8, linewidth=2)
                    plt.title(f'Distribuci√≥n de Fraudes por Horario - {datetime.now().strftime("%d/%m/%Y")}', fontsize=14, fontweight='bold')
                    plt.xlabel('Hora del D√≠a')
                    plt.ylabel('N√∫mero de Fraudes')
                    plt.xticks(range(0, 24))
                    plt.grid(True, alpha=0.3)
                    archivo_horario = os.path.join(self.carpeta_graficas, f"fraudes_horario_{fecha_hoy}.png")
                    plt.tight_layout()
                    plt.savefig(archivo_horario, dpi=300, bbox_inches='tight')
                    plt.close()
                    graficas_generadas.append(archivo_horario)

            print(f"‚úÖ Gr√°ficas generadas: {len(graficas_generadas)}")
            return graficas_generadas
        except Exception as e:
            print(f"‚ùå Error al generar gr√°ficas: {e}")
            return []

    def enviar_reporte_outlook(self, datos, graficas):
        """
        Env√≠a reporte usando Outlook corporativo con im√°genes incrustadas en el cuerpo.
        """
        try:
            print("üìß Preparando env√≠o de correo HTML por Outlook...")
            mail = self.outlook.CreateItem(0)
            
            destinatarios = ["20210832@lamolina.edu.pe"]
            mail.To = "; ".join(destinatarios)
            
            fecha_reporte = datetime.now().strftime("%d/%m/%Y")
            mail.Subject = f"[AUTOMATICO] Reporte Diario de Fraudes - {fecha_reporte} (Carpeta: {self.carpeta_outlook_objetivo})"
            
            total_fraudes = len(datos)
            
            # --- L√≥gica para incrustar im√°genes ---
            graficas_incrustadas = {}
            for i, grafica_path in enumerate(graficas):
                if os.path.exists(grafica_path):
                    cid = f"grafica{i+1}"
                    attachment = mail.Attachments.Add(os.path.abspath(grafica_path))
                    attachment.PropertyAccessor.SetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F", cid)
                    graficas_incrustadas[grafica_path] = cid
                    print(f"üñºÔ∏è  Imagen preparada para incrustar con CID: {cid}")

            # --- Construcci√≥n del cuerpo del correo en HTML ---
            cuerpo_html = f"""
            <html>
            <head>
                <style>
                    body {{ font-family: Arial, sans-serif; color: #333; }}
                    .container {{ padding: 20px; border: 1px solid #ddd; border-radius: 8px; max-width: 800px; margin: auto; }}
                    .header {{ background-color: #f2f2f2; padding: 10px; border-bottom: 2px solid #e74c3c; font-size: 18px; font-weight: bold; text-align: center;}}
                    .summary-table {{ width: 100%; border-collapse: collapse; margin-top: 15px; }}
                    .summary-table td {{ padding: 8px; border: 1px solid #ddd; }}
                    .summary-table .label {{ font-weight: bold; background-color: #f9f9f9; width: 40%; }}
                    .section-title {{ color: #e74c3c; border-bottom: 1px solid #eee; padding-bottom: 5px; margin-top: 25px; }}
                    .footer {{ margin-top: 25px; font-size: 12px; color: #777; text-align: center; }}
                    img {{ max-width: 100%; height: auto; border: 1px solid #ccc; border-radius: 4px; margin-top: 10px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">REPORTE AUTOM√ÅTICO DE FRAUDES</div>
                    <p>
                        <b>Fuente:</b> Carpeta Outlook '{self.carpeta_outlook_objetivo}'<br>
                        <b>Fecha:</b> {fecha_reporte}<br>
                        <b>Hora de generaci√≥n:</b> {datetime.now().strftime("%H:%M:%S")}
                    </p>
                    <h3 class="section-title">üìä RESUMEN EJECUTIVO</h3>
                    <table class="summary-table">
                        <tr><td class="label">üö® Total de fraudes detectados</td><td><b>{total_fraudes}</b></td></tr>
                    </table>
                    <h3 class="section-title">üìà AN√ÅLISIS VISUAL</h3>
            """

            if not graficas_incrustadas:
                cuerpo_html += "<p>No se generaron gr√°ficas para este reporte.</p>"
            else:
                for path, cid in graficas_incrustadas.items():
                    cuerpo_html += f'<h4>{os.path.basename(path).replace("_", " ").replace(".png", "").title()}</h4>'
                    cuerpo_html += f'<img src="cid:{cid}"><br><br>'

            cuerpo_html += f"""
                    <div class="footer">
                        <p>Este reporte ha sido generado autom√°ticamente por el Sistema de Monitoreo de Fraudes.</p>
                        <p><i>CONFIDENCIAL - Solo para personal autorizado</i></p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            mail.HTMLBody = cuerpo_html

            # --- Adjuntar Excel (este s√≠ va como archivo) ---
            fecha_hoy = datetime.now().strftime("%Y%m%d")
            excel_diario = os.path.join(self.carpeta_diarios, f"fraudes_{fecha_hoy}.xlsx")
            if os.path.exists(excel_diario):
                mail.Attachments.Add(os.path.abspath(excel_diario))
                print(f"üìé Adjuntado (archivo): fraudes_{fecha_hoy}.xlsx")
            
            mail.Importance = 2  # High
            mail.Send()
            
            print(f"‚úÖ Reporte enviado exitosamente a: {', '.join(destinatarios)}")
            
        except Exception as e:
            print(f"‚ùå Error al enviar correo: {e}")
            print("‚ö†Ô∏è  Revisa que Outlook est√© abierto y funcionando")

    def limpiar_archivos_temporales(self):
        """Limpia archivos temporales"""
        try:
            print("üßπ Limpiando archivos temporales...")
            for folder in [self.carpeta_temp, self.carpeta_graficas]:
                for archivo in os.listdir(folder):
                    ruta_archivo = os.path.join(folder, archivo)
                    os.remove(ruta_archivo)
            print("‚úÖ Limpieza completada.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al limpiar archivos temporales: {e}")
    
    def probar_conexion_carpeta(self):
        """Funci√≥n de prueba para verificar conexi√≥n a la carpeta personalizada"""
        try:
            print(f"üß™ Probando conexi√≥n a la carpeta '{self.carpeta_outlook_objetivo}'...")
            carpeta_objetivo = self.obtener_carpeta_personalizada()
            print(f"üìß Total de correos en la carpeta: {carpeta_objetivo.Items.Count}")
            
            items = carpeta_objetivo.Items
            items.Sort("[ReceivedTime]", True)
            
            print("\nüìã √öltimos 5 correos en la carpeta:")
            for i in range(min(5, items.Count)):
                correo = items[i]
                print(f"  {i+1}. [{correo.ReceivedTime.strftime('%d/%m/%Y %H:%M')}] De: {correo.SenderEmailAddress or 'N/A'}")
                print(f"     Asunto: {correo.Subject}")
                print(f"     Adjuntos: {correo.Attachments.Count}\n")
            return True
        except Exception as e:
            print(f"‚ùå Error al probar conexi√≥n: {e}")
            return False

# --- Ejecuci√≥n del Script ---
def main():
    """Funci√≥n principal para ejecutar el procesamiento"""
    try:
        procesador = ProcesadorReportesFraudeOutlook()
        if procesador.probar_conexion_carpeta():
            procesador.procesar_correo_diario()
    except Exception as e:
        print(f"üí• Error cr√≠tico en el proceso: {e}")
        print("üîß Verifica que Outlook est√© abierto y que la carpeta '{procesador.carpeta_outlook_objetivo}' exista.")

if __name__ == "__main__":
    main()
