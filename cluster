# Instala el paquete si no lo tienes (descomenta la línea siguiente si es necesario)
# install.packages("stringdist")

# Carga las librerías necesarias
library(data.table)
library(stringdist)
library(dplyr)

# 1. Extrae los establecimientos únicos
unique_est <- unique(dt$ESTABLECIMIENTO)

# 2. Calcula la matriz de distancias usando stringdist
# Método "lv" (Levenshtein) es bueno para errores tipográficos; prueba "jw" (Jaro-Winkler) para similitudes más suaves
dist_mat <- stringdistmatrix(unique_est, method = "lv", useNames = TRUE)

# Convierte a objeto dist
dist_obj <- as.dist(dist_mat)

# 3. Realiza clustering jerárquico (método 'ward.D2' o 'complete' funcionan bien)
hc <- hclust(dist_obj, method = "ward.D2")

# 4. Visualiza el dendrograma para decidir el número de clusters
plot(hc, labels = unique_est, main = "Dendrograma de Establecimientos", cex = 0.6)
rect.hclust(hc, k = 5)  # Sugiere 5 clusters (ajusta según el gráfico)

# 5. Corta el árbol para obtener clusters
# Usa k (número de clusters) o h (altura de corte); ajusta según el dendrograma
clusters <- cutree(hc, k = 5)  # O cutree(hc, h = 10) para un corte por altura

# 6. Crea un dataframe con los únicos y sus clusters
clustered_est <- data.frame(
  ESTABLECIMIENTO = unique_est,
  Cluster = clusters
)

# 7. Une de vuelta a tu dt original
dt_clustered <- dt %>%
  left_join(clustered_est, by = "ESTABLECIMIENTO")

# 8. Resume para ver los grupos
dt_clustered %>%
  group_by(Cluster) %>%
  summarise(Establecimientos = paste(unique(ESTABLECIMIENTO), collapse = ", ")) %>%
  print()

# 9. O filtra un cluster específico (ejemplo: Cluster 1)
dt_clustered[Cluster == 1, .(ESTABLECIMIENTO)]