######################################
# Script R - Análisis de fraude VCAS #
######################################

# 1. Cargar librerías ----
library(ggplot2)
library(dplyr)
library(tidyr)

# 2. Crear datasets de ejemplo (ajusta con tus datos reales) ----

# Datos fraude por score
df <- data.frame(
  Score = c("20-24","25-29","30-34","40-44","45-49","65-69"),
  Fraud = c(2,5,5,5,3,1),
  Total = c(155,242,165,375,691,82)
)

# Datos fraude vs monto
df2 <- data.frame(
  Score = c("20-24","25-29","30-34","40-44","45-49","65-69"),
  MontoFraude = c(155,242,165,375,691,82),
  MontoNoFraude = c(3000,4200,5000,7000,9000,2000)
)

# Datos por autenticación
df3 <- data.frame(
  TipoAuth = c("MC (OTP)","N (sin OTP)"),
  Fraud = c(10,21),
  Total = c(710,1000)
)

# Datos curva de Lorenz (ejemplo)
df4 <- data.frame(
  transaccion = 1:10,
  monto_fraude = c(200,150,100,80,60,40,20,15,10,5)
)

# Datos heatmap
df5 <- expand.grid(
  Score=c("20-24","25-29","30-34","40-44","45-49","65-69"),
  Auth=c("MC","N")
)
set.seed(1)
df5$MontoFraude <- sample(50:700, nrow(df5))

# 3. Gráfico 1: Distribución de fraude por score ----
df <- df %>%
  mutate(pct_fraud = (Fraud/Total)*100)

g1 <- ggplot(df, aes(x=reorder(Score, pct_fraud), y=pct_fraud)) +
  geom_col(fill="#E63946") +
  coord_flip() +
  labs(title="Concentración de fraude por Score VCAS",
       x="Score VCAS", y="% Fraude") +
  theme_minimal(base_size=13)

# 4. Gráfico 2: Fraude vs monto transado ----
df2_long <- df2 %>%
  pivot_longer(cols=c("MontoFraude","MontoNoFraude"),
               names_to="Tipo", values_to="Monto")

g2 <- ggplot(df2_long, aes(x=Score, y=Monto, fill=Tipo)) +
  geom_col(position="stack") +
  scale_fill_manual(values=c("MontoFraude"="#E63946","MontoNoFraude"="#457B9D")) +
  labs(title="Fraude vs No Fraude según Score",
       x="Score VCAS", y="Monto transado ($)") +
  theme_minimal(base_size=13)

# 5. Gráfico 3: Tasa de fraude por autenticación ----
df3 <- df3 %>%
  mutate(rate = Fraud/Total * 100)

g3 <- ggplot(df3, aes(x=TipoAuth, y=rate, fill=TipoAuth)) +
  geom_col(width=0.6) +
  geom_text(aes(label=sprintf("%.1f%%", rate)), vjust=-0.5) +
  scale_fill_manual(values=c("#2A9D8F","#E76F51")) +
  labs(title="Tasa de fraude según método de autenticación",
       x="", y="% Fraude") +
  theme_minimal(base_size=13) +
  theme(legend.position="none")

# 6. Gráfico 4: Curva de concentración del fraude (Lorenz) ----
df4 <- df4 %>%
  arrange(desc(monto_fraude)) %>%
  mutate(cum_casos = cumsum(1)/n(),
         cum_monto = cumsum(monto_fraude)/sum(monto_fraude))

g4 <- ggplot(df4, aes(x=cum_casos, y=cum_monto)) +
  geom_line(size=1.2, color="#1D3557") +
  geom_point(color="#E63946") +
  geom_abline(slope=1, intercept=0, linetype="dashed", color="gray") +
  labs(title="Curva de concentración del monto de fraude",
       x="Proporción de transacciones",
       y="Proporción acumulada de monto fraude") +
  theme_minimal(base_size=13)

# 7. Gráfico 5: Heatmap Score vs Autenticación ----
g5 <- ggplot(df5, aes(x=Score, y=Auth, fill=MontoFraude)) +
  geom_tile(color="white") +
  scale_fill_gradient(low="#F1FAEE", high="#E63946") +
  labs(title="Mapa de calor: monto fraude por Score y autenticación",
       x="Score VCAS", y="Tipo autenticación", fill="Monto $") +
  theme_minimal(base_size=13)

# 8. Mostrar gráficos ----
print(g1)
print(g2)
print(g3)
print(g4)
print(g5)

# 9. (Opcional) Guardar gráficos en PNG ----
ggsave("grafico1_fraude_score.png", g1, width=7, height=5)
ggsave("grafico2_fraude_monto.png", g2, width=7, height=5)
ggsave("grafico3_autenticacion.png", g3, width=7, height=5)
ggsave("grafico4_curva_lorenz.png", g4, width=7, height=5)
ggsave("grafico5_heatmap.png", g5, width=7, height=5)